// bm_smoothSkinWeightBrush

// these two global string variables will store the name and skin cluster of the active mesh
global string $bm_smoothWeightShapeName;
global string $bm_smoothWeightSkinClusterName;
global int $hasSkinCluster = 1;
global string $selectionObjectsOnly[];

// we don't need to do anything, but this function seems to need to exist for the brush to init correctly.
global proc bm_SmoothSkinBrushStartStroke(string $shapeShortName){}

// This runs just once when the brush is initialized.
global proc bm_smoothBrushGetSurfaceInformation()
{
    global int $hasSkinCluster;
    global string $bm_smoothWeightShapeName;
    global string $bm_smoothWeightSkinClusterName;
    global string $selectionObjectsOnly[];
    string $selection[];
    string $transformShapes[];
    string $meshShape;

    $selection = `ls -selection -long`;
    string $objectType = `objectType $selectionObjectsOnly[0]`;

    if ($objectType == "mesh" || $objectType == "transform")
    {
        if (`objectType $selectionObjectsOnly[0]` == "mesh")
        {
            // if we have a vertex component or a shape selected, we don't need to get the shape relatives
            $meshShape = $selectionObjectsOnly[0];
            $bm_smoothWeightShapeName = $meshShape;
        }
        else if (`objectType $selectionObjectsOnly` == "transform")
        {
            $transformShapes = `listRelatives -shapes -noIntermediate -fullPath $selectionObjectsOnly[0]`;
            // take the first shape. Transforms with multiple shapes are not supported
            if (size($transformShapes))
                $meshShape = $transformShapes[0];
                // make sure the shape type is a polygonal mesh
                if ($meshShape != "" && `objectType $meshShape` == "mesh")
                {
                    $bm_smoothWeightShapeName = $meshShape;
                }
            else
            {
                // the transform has no shape node
                $meshShape = "";
                warning "The given transform has no shape node.";
            }
        }

        if ($meshShape != "")
        {
            $bm_smoothWeightSkinClusterName = `findRelatedSkinCluster $meshShape`;
            if ($bm_smoothWeightSkinClusterName == "")
                $hasSkinCluster = 0;
        }
        else
            $hasSkinCluster = 0;

    }
    else
    {
        warning "The selected object's type is not supported for this tool.";
        $hasSkinCluster = 0;
    }
}

// The slot, index, and value args are from the overridden Artisan tool fn and get passed in automatically.
global proc bm_smoothSkinWeightsBrushStroke(int $slot, int $vertexIndex, float $brushValue)
{
    // Declaring these variables signals we want to use them within this function
    global string $bm_smoothWeightShapeName;
    global string $bm_smoothWeightSkinClusterName;

    if ($brushValue >= 0.0 && $brushValue <= 1.0)
        // Calls the command for each vertex under the brush. Maya automatically makes this undoable per-stroke.
        bmSmoothSkinWeightsBrushCmd $vertexIndex $brushValue $bm_smoothWeightShapeName $bm_smoothWeightSkinClusterName;
    else
        warning "Could not smooth weight as the value was not between 0 and 1";
}

// This function sets up the artUserPaintCtx context with the options we want
global proc bm_smoothSkinWeightsBrushSetup(string $context)
{
    global string $gSelect;
    global string $bm_smoothWeightSkinClusterName;

    artUserPaintCtx -edit -initializeCmd "bm_SmoothSkinBrushStartStroke"
    -setValueCommand "bm_smoothSkinWeightsBrushStroke" -finalizeCmd "" -getValueCommand ""
    -getSurfaceCommand "" -surfaceConformedBrushVertices 1 -showactive 1 -getArrayAttrCommand ""
    -interactiveUpdate 1 -toolCleanupCmd "" $context;
}

// This function switches us into the paint scripts tool context and runs the tool setup
global proc bm_smoothSkinBrushInit()
{
    global int $hasSkinCluster;
    global string $bm_smoothWeightShapeName;
    global string $bm_smoothWeightSkinClusterName;
    // It's easier to just not enter the context if there is nothing selected.
    global string $selectionObjectsOnly[];
    $selectionObjectsOnly = `ls -selection -objectsOnly`;

    if (size($selectionObjectsOnly) > 0)
    {
        // We can also gather and verify our surface information before entering the context
        bm_smoothBrushGetSurfaceInformation();

        if ($hasSkinCluster)
        {
            ScriptPaintTool;
            artUserPaintCtx -edit -toolSetupCmd "bm_smoothSkinWeightsBrushSetup" `currentCtx`;
        }
        else
            warning "Did not enter paint context since the selected object has no skin cluster.";
    }
    else
        warning "Please make a selection before using this tool.";
}

// sourcing this file will automatically enter you into the context
bm_smoothSkinBrushInit();